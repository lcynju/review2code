switch provider
{ if new provider id equals m storage provider id { timber v lockable database ignoring provider switch request as they are equal s new provider id return } timber v lockable database switching provider from s to s m storage provider id new provider id final string old provider id = m storage provider id lock write old provider id try { lock write new provider id try { try { m db close } catch exception e { timber i e unable to close db on local store migration } final storage manager storage manager = get storage manager file old database = storage manager get database u uid old provider id prepare storage new provider id file helper move recursive old database storage manager get database u uid new provider id file helper move recursive storage manager get attachment directory u uid old provider id storage manager get attachment directory u uid new provider id delete database old database m storage provider id = new provider id open or create dataspace } finally { unlock write new provider id } } finally { unlock write old provider id }}
// create new path move all database files move all attachment files remove any remaining old journal files re initialize this class with the new uri
