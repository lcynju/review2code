get messages
{ account account = get account account uuid lockable database database = get database account try { return database execute false new db callback cursor { override public cursor do db work sqlite database db throws wrapped exception unavailable storage exception { string where if text utils is empty selection { where = internal message columns deleted + " = 0 and " + internal message columns empty + " = 0"; } else { where = "(" + selection + ") and " + internal message columns deleted + " = 0 and " + internal message columns empty + " = 0"; } final cursor cursor if utility array contains any projection object folders columns { string builder query = new string builder query append select "); boolean first = true for string column name : projection { if first { query append } else { first = false } if message columns id equals column name { query append m query append message columns id query append as "); query append message columns id } else { query append column name } } query append from messages m " + join threads t on t message id = m id " + left join folders f on m folder id = f id " + where "); query append sql query builder add prefix to selection fixup messages columns m where query append order by "); query append sql query builder add prefix to selection fixup messages columns m sort order cursor = db raw query query to string selection args } else { cursor = db query messages table projection where selection args null null sort order } return cursor } }); } catch unavailable storage exception e { throw new runtime exception storage not available e } catch messaging exception e { throw new runtime exception messaging exception e }}

