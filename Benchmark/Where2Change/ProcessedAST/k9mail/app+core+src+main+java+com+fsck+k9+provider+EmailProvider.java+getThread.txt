get thread
{ account account = get account account uuid lockable database database = get database account try { return database execute false new db callback cursor { override public cursor do db work sqlite database db throws wrapped exception unavailable storage exception { string builder query = new string builder query append select "); boolean first = true for string column name : projection { if first { query append } else { first = false } if message columns id equals column name { query append m + message columns id + " as " + message columns id } else { query append column name } } query append from " + threads table + " t join " + messages table + " m " + on m + message columns id + " = t + thread columns message id + ") "); if utility array contains any projection object folders columns { query append left join " + folders table + " f " + on m + message columns folder id + " = f + folder columns id + ") "); } query append where " + thread columns root + " = ? and " + internal message columns deleted + " = 0 and " + internal message columns empty + " = 0"); query append order by "); query append sql query builder add prefix to selection fixup messages columns m sort order return db raw query query to string new string { thread id }); } }); } catch unavailable storage exception e { throw new runtime exception storage not available e } catch messaging exception e { throw new runtime exception messaging exception e }}

