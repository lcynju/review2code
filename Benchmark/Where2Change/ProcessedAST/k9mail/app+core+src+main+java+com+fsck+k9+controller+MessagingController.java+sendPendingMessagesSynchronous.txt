send pending messages synchronous
{ exception last failure = null boolean was permanent failure = false try { server settings server settings = account get outgoing server settings if server settings is missing credentials { handle authentication failure account false return } local store local store = local store provider get instance account outbox state repository outbox state repository = local store get outbox state repository local folder local folder = local store get folder account get outbox folder id if local folder exists { timber v outbox does not exist return } local folder open long outbox folder id = local folder get database id list local message local messages = local folder get messages null int progress = 0; int todo = local messages size for messaging listener l : get listeners { l synchronize mailbox progress account outbox folder id progress todo } fetch profile fp = new fetch profile fp add fetch profile item envelope fp add fetch profile item body timber i scanning outbox folder for messages to send backend backend = get backend account for local message message : local messages { if message is set flag deleted { message destroy continue } try { long message id = message get database id outbox state outbox state = outbox state repository get outbox state message id if outbox state get send state != send state ready { timber v skipping sending message " + message get uid notification controller show send failed notification account new messaging exception message get subject continue } timber i send count for message s is d message get uid outbox state get number of send attempts local folder fetch collections singleton list message fp null try { if message get header k identity header length > 0 || message is set flag draft { timber v the user has set the outbox and drafts folder to the same thing " + this message appears to be a draft so k will not send it continue } outbox state repository increment send attempts message id message set flag flag x send in progress true timber i sending message with uid s message get uid backend send message message message set flag flag x send in progress false message set flag flag seen true progress for messaging listener l : get listeners { l synchronize mailbox progress account outbox folder id progress todo } move or delete sent message account local store message outbox state repository remove outbox state message id } catch authentication failed exception e { outbox state repository decrement send attempts message id last failure = e was permanent failure = false handle authentication failure account false handle send failure account local folder message e } catch certificate validation exception e { outbox state repository decrement send attempts message id last failure = e was permanent failure = false notify user if certificate problem account e false handle send failure account local folder message e } catch messaging exception e { last failure = e was permanent failure = e is permanent failure if was permanent failure { string error message = e get message outbox state repository set send attempt error message id error message } else if outbox state get number of send attempts + 1 >= max send attempts { outbox state repository set send attempts exceeded message id } handle send failure account local folder message e } catch exception e { last failure = e was permanent failure = true handle send failure account local folder message e } } catch exception e { last failure = e was permanent failure = false timber e e failed to fetch message for sending notify synchronize mailbox failed account local folder e } } if last failure != null { if was permanent failure { notification controller show send failed notification account last failure } else { notification controller show send failed notification account last failure } } } catch unavailable storage exception e { timber i failed to send pending messages because storage is not available - trying again later throw new unavailable account exception e } catch exception e { timber v e failed to send pending messages } finally { if last failure == null { notification controller clear send failed notification account } }}
/* * the profile we will use to pull all of the content * for a given local message into memory for sending fixme when uploading a message to the remote sent folder the move code creates a placeholder message in the outbox this code gets rid of these messages it d be preferable if the placeholder message was never created though
