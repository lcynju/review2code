process draft message
{ message message = message view info message draft message id = messaging controller get id message subject view set text message view info subject recipient presenter init from draft message message final string in reply to = message get header in reply to if in reply to length >= 1) { replied to message id = in reply to } final string references = message get header references if references length >= 1) { referenced message ids = references } if related message processed { attachment presenter load all available attachments message view info } map identity field string k identity = new hash map string identity headers = message get header k identity header if identity headers length == 0) { identity headers = message view info root part get header k identity header } if identity headers length > 0 && identity headers != null { k identity = identity header parser parse identity headers } identity new identity = new identity if k identity contains key identity field signature { new identity = new identity with signature use true with signature k identity get identity field signature signature changed = true } else { if message instanceof local message { new identity = new identity with signature use local message message get folder get signature use } new identity = new identity with signature identity get signature } if k identity contains key identity field name { new identity = new identity with name k identity get identity field name identity changed = true } else { new identity = new identity with name identity get name } if k identity contains key identity field email { new identity = new identity with email k identity get identity field email identity changed = true } else { new identity = new identity with email identity get email } if k identity contains key identity field original message { related message reference = null string original message = k identity get identity field original message message reference message reference = message reference parse original message if message reference != null { account account = preferences get account message reference get account uuid if account != null { related message reference = message reference } } } identity = new identity update signature update from reply to presenter set identity identity quoted message presenter process draft message message view info k identity
// read in reply to header from draft read references header from draft decode the identity header when loading a draft see build identity header text body for a detailed description of the composition of this blob check if this is a valid account in our database
