delete messages synchronous
{ try { list local message local only messages = new array list list local message synced messages = new array list list string synced message uids = new array list for local message message : messages { string uid = message get uid if uid starts with k local uid prefix { local only messages add message } else { synced messages add message synced message uids add uid } } backend backend = get backend account local store local store = local store provider get instance account local folder local folder = local store get folder folder id local folder open map string string uid map = null long trash folder id = account get trash folder id local folder local trash folder = null if account has trash folder || folder id == trash folder id || backend get supports trash folder && backend is delete move to trash { timber d not moving deleted messages to local trash folder removing local copies if local only messages is empty { local folder destroy messages local only messages } if synced messages is empty { local folder set flags synced messages collections singleton flag deleted true } } else { timber d deleting messages in normal folder moving local trash folder = local store get folder trash folder id message store message store = message store manager get message store account list long message ids = new array list map long string message id to uid mapping = new hash map for local message message : messages { long message id = message get database id message ids add message id message id to uid mapping put message id message get uid } map long long move message id mapping = message store move messages message ids trash folder id map long string destination mapping = message store get message server ids move message id mapping values uid map = new hash map for entry long long entry : move message id mapping entry set { long source message id = entry get key long destination message id = entry get value string source uid = message id to uid mapping get source message id string destination uid = destination mapping get destination message id uid map put source uid destination uid } if account is mark message as read on delete { collection long destination message ids = move message id mapping values message store set flag destination message ids flag seen true } } for messaging listener l : get listeners { l folder status changed account folder id if local trash folder != null { l folder status changed account trash folder id } } timber d delete policy for account s is s account get description account get delete policy long outbox folder id = account get outbox folder id if outbox folder id != null && folder id == outbox folder id && supports upload account { for string destination uid : uid map values { pending command command = pending append create trash folder id destination uid queue pending command account command } process pending commands account } else if local folder is local only { } else if synced message uids is empty { if account get delete policy == delete policy on delete { if account has trash folder || folder id == trash folder id || backend is delete move to trash { queue delete account folder id synced message uids } else if account is mark message as read on delete { queue move or copy account folder id trash folder id move or copy flavor move and mark as read uid map } else { queue move or copy account folder id trash folder id move or copy flavor move uid map } process pending commands account } else if account get delete policy == delete policy mark as read { queue set flag account local folder get database id true flag seen synced message uids process pending commands account } else { timber d delete policy s prevents delete from server account get delete policy } } unsuppress messages account messages } catch unavailable storage exception e { timber i failed to delete message because storage is not available - trying again later throw new unavailable account exception e } catch messaging exception me { throw new runtime exception error deleting message from local store me }}
// if the message was in the outbox then it has been copied to local trash and has to be copied to remote trash nothing to do on the remote side
