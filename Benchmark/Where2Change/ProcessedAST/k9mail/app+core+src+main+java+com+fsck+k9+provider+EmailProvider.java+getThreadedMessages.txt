get threaded messages
{ account account = get account account uuid lockable database database = get database account try { return database execute false new db callback cursor { override public cursor do db work sqlite database db throws wrapped exception unavailable storage exception { string builder query = new string builder query append select "); boolean first = true for string column name : projection { if first { query append } else { first = false } final string aggregation func = thread aggregation funcs get column name if message columns id equals column name { query append m + message columns id + " as " + message columns id } else if aggregation func != null { query append a query append column name query append as "); query append column name } else { query append column name } } query append from ("); create threaded sub query projection selection query query append a "); query append join " + threads table + " t " + on t + thread columns root + " = a thread root " + join " + messages table + " m " + on m + message columns id + " = t + thread columns message id + " and " + m + internal message columns empty + "=0 and " + m + internal message columns deleted + "=0 and " + m + message columns date + " = a + message columns date + ") "); if utility array contains any projection object folders columns { query append join " + folders table + " f " + on m + message columns folder id + " = f + folder columns id + ") "); } query append group by " + thread columns root if text utils is empty sort order { query append order by "); query append sql query builder add prefix to selection fixup aggregated messages columns a sort order } return db raw query query to string selection args } }); } catch unavailable storage exception e { throw new runtime exception storage not available e } catch messaging exception e { throw new runtime exception messaging exception e }}

